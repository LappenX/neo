CMAKE_MINIMUM_REQUIRED(VERSION 2.8 FATAL_ERROR)

PROJECT(neo)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)



SET(CUDA_PROPAGATE_HOST_FLAGS OFF)
FIND_PACKAGE(CUDA)
FIND_PACKAGE(Boost 1.42.0 COMPONENTS date_time filesystem graph iostreams system regex signals unit_test_framework thread program_options serialization)
FIND_PACKAGE(CURL)
PKG_SEARCH_MODULE(GLFW REQUIRED glfw3)
FIND_PACKAGE(GLM REQUIRED)
FIND_PACKAGE(OpenGL REQUIRED)
FIND_PACKAGE(GLEW REQUIRED)
FIND_PACKAGE(FreeImage REQUIRED)
FIND_PACKAGE(Threads REQUIRED)



FUNCTION(NEO_BEGIN_TARGET TARGET_NAME TARGET_TYPE)
  SET(NEO_SOURCE_LIST PARENT_SCOPE)
  SET(NEO_INCLUDE_DIRECTORY_LIST PARENT_SCOPE)
  SET(NEO_DEPENDENCY_LIST PARENT_SCOPE)
  SET(NEO_TARGET_NAME ${TARGET_NAME} PARENT_SCOPE)
  SET(NEO_TARGET_TYPE ${TARGET_TYPE} PARENT_SCOPE)
  SET(NEO_CXX_STANDARD 98 PARENT_SCOPE)
  SET(NEO_CUDA_COMPUTE_CAPABILITY 20 PARENT_SCOPE)
  SET(NEO_COMPILE_OPTIONS PARENT_SCOPE)
ENDFUNCTION()

FUNCTION(NEO_END_TARGET)
  LIST(APPEND NEO_COMPILE_OPTIONS "-std=c++${NEO_CXX_STANDARD}")

  # Create target
  IF(${NEO_TARGET_TYPE} STREQUAL "EXE")
    ADD_EXECUTABLE(${NEO_TARGET_NAME} ${NEO_SOURCE_LIST})
  ELSEIF(${NEO_TARGET_TYPE} STREQUAL "CUDA_EXE")
    IF(NOT ${CUDA_FOUND})
      MESSAGE(FATAL_ERROR "Cannot add CUDA_EXE target since CUDA was not found")
    ENDIF()
    
    # Include directories
    FOREACH(DIR ${NEO_INCLUDE_DIRECTORY_LIST})
      CUDA_INCLUDE_DIRECTORIES(${DIR})
      INCLUDE_DIRECTORIES(${DIR})
    ENDFOREACH()
    
    # Compile options
    LIST(APPEND NEO_COMPILE_OPTIONS "-gencode arch=compute_${NEO_CUDA_COMPUTE_CAPABILITY},code=sm_${NEO_CUDA_COMPUTE_CAPABILITY}")
    SET(CUDA_NVCC_FLAGS)
    FOREACH(OPT ${NEO_COMPILE_OPTIONS})
      SET(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} ${OPT}")
    ENDFOREACH()
    SET(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS}" PARENT_SCOPE)

    # Add target
    CUDA_ADD_EXECUTABLE(${NEO_TARGET_NAME} ${NEO_SOURCE_LIST})
  ELSE()
    MESSAGE(FATAL_ERROR "Invalid target type ${NEO_TARGET_TYPE}")
  ENDIF()

  # Set target properties
  TARGET_INCLUDE_DIRECTORIES(${NEO_TARGET_NAME} PUBLIC ${NEO_INCLUDE_DIRECTORY_LIST})
  TARGET_LINK_LIBRARIES(${NEO_TARGET_NAME} ${NEO_DEPENDENCY_LIST})
  FOREACH(OPT ${NEO_COMPILE_OPTIONS})
    TARGET_COMPILE_OPTIONS(${NEO_TARGET_NAME} PUBLIC "${OPT}")
  ENDFOREACH()
  SET_TARGET_PROPERTIES(${NEO_TARGET_NAME}
    PROPERTIES
    ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib"
    LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib"
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
  )
  
  # Clear lists
  SET(NEO_SOURCE_LIST PARENT_SCOPE)
  SET(NEO_INCLUDE_DIRECTORY_LIST PARENT_SCOPE)
  SET(NEO_DEPENDENCY_LIST PARENT_SCOPE)
  SET(NEO_TARGET_NAME PARENT_SCOPE)
  SET(NEO_TARGET_TYPE PARENT_SCOPE)
  SET(NEO_CXX_STANDARD PARENT_SCOPE)
  SET(NEO_CUDA_COMPUTE_CAPABILITY PARENT_SCOPE)
  SET(NEO_COMPILE_OPTIONS PARENT_SCOPE)
ENDFUNCTION()

FUNCTION(NEO_ADD_SOURCES)
  FOREACH(FILE IN LISTS ARGN)
    IF(NOT IS_ABSOLUTE "${FILE}")
      GET_FILENAME_COMPONENT(FILE "${FILE}" ABSOLUTE)
    ENDIF()
    LIST(APPEND NEO_SOURCE_LIST "${FILE}")
  ENDFOREACH()
  SET(NEO_SOURCE_LIST ${NEO_SOURCE_LIST} PARENT_SCOPE)
ENDFUNCTION()

FUNCTION(NEO_ADD_INCLUDE_DIRECTORIES)
  FOREACH(FILE IN LISTS ARGN)
    IF(NOT IS_ABSOLUTE "${FILE}")
      GET_FILENAME_COMPONENT(FILE "${FILE}" ABSOLUTE)
    ENDIF()
    LIST(APPEND NEO_INCLUDE_DIRECTORY_LIST "${FILE}")
  ENDFOREACH()
  SET(NEO_INCLUDE_DIRECTORY_LIST ${NEO_INCLUDE_DIRECTORY_LIST} PARENT_SCOPE)
ENDFUNCTION()

FUNCTION(NEO_ADD_DEPENDENCIES)
  FOREACH(DEPENDENCY IN LISTS ARGN)
    LIST(APPEND NEO_DEPENDENCY_LIST "${${DEPENDENCY}_LIBRARIES}")
    LIST(APPEND NEO_INCLUDE_DIRECTORY_LIST "${${DEPENDENCY}_INCLUDE_DIRS}")
  ENDFOREACH()
  SET(NEO_DEPENDENCY_LIST ${NEO_DEPENDENCY_LIST} PARENT_SCOPE)
  SET(NEO_INCLUDE_DIRECTORY_LIST ${NEO_INCLUDE_DIRECTORY_LIST} PARENT_SCOPE)
ENDFUNCTION()

ADD_SUBDIRECTORY("packages")
